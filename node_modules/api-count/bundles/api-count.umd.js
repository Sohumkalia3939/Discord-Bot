(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common/http'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('api-count', ['exports', '@angular/core', 'rxjs', '@angular/common/http', 'rxjs/operators'], factory) :
    (global = global || self, factory(global['api-count'] = {}, global.ng.core, global.rxjs, global.ng.common.http, global.rxjs.operators));
}(this, (function (exports, core, rxjs, http, operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/loader.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LoaderService = /** @class */ (function () {
        function LoaderService() {
            this.apiCount = 0;
            this.api = new rxjs.BehaviorSubject(this.apiCount);
            this.apiCountObservable = this.api.asObservable();
        }
        /**
         * @return {?}
         */
        LoaderService.prototype.addAPI = /**
         * @return {?}
         */
        function () {
            this.apiCount += 1;
            this.api.next(this.apiCount);
            console.log("Ongoing API count " + this.apiCount);
        };
        /**
         * @return {?}
         */
        LoaderService.prototype.removeAPI = /**
         * @return {?}
         */
        function () {
            this.apiCount -= 1;
            this.api.next(this.apiCount);
            console.log("Ongoing API count " + this.apiCount);
        };
        LoaderService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        LoaderService.ctorParameters = function () { return []; };
        /** @nocollapse */ LoaderService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function LoaderService_Factory() { return new LoaderService(); }, token: LoaderService, providedIn: "root" });
        return LoaderService;
    }());
    if (false) {
        /** @type {?} */
        LoaderService.prototype.apiCount;
        /**
         * @type {?}
         * @private
         */
        LoaderService.prototype.api;
        /** @type {?} */
        LoaderService.prototype.apiCountObservable;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/api-count.interceptor.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ApiCountInterceptor = /** @class */ (function () {
        function ApiCountInterceptor(injector) {
            this.injector = injector;
        }
        /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
        ApiCountInterceptor.prototype.intercept = /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
        function (req, next) {
            /** @type {?} */
            var loaderService = this.injector.get(LoaderService);
            /** @type {?} */
            var cloneChanges = {};
            //Modify Request
            /** @type {?} */
            var authReq = req.clone(cloneChanges);
            loaderService.addAPI();
            return next.handle(authReq).pipe(operators.map((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event instanceof http.HttpResponse) {
                    loaderService.removeAPI();
                }
                return event;
            })), operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                /** @type {?} */
                var data = {};
                data = {
                    reason: error && error.error && error.error.reason ? error.error.reason : '',
                    status: error.status
                };
                loaderService.removeAPI();
                return rxjs.throwError(error);
            })));
        };
        ApiCountInterceptor.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ApiCountInterceptor.ctorParameters = function () { return [
            { type: core.Injector }
        ]; };
        /** @nocollapse */ ApiCountInterceptor.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ApiCountInterceptor_Factory() { return new ApiCountInterceptor(core.ɵɵinject(core.INJECTOR)); }, token: ApiCountInterceptor, providedIn: "root" });
        return ApiCountInterceptor;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ApiCountInterceptor.prototype.injector;
    }
    /** @type {?} */
    var httpInterceptorProviders = [
        { provide: http.HTTP_INTERCEPTORS, useClass: ApiCountInterceptor, multi: true },
    ];

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/api-count.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ApiCountModule = /** @class */ (function () {
        function ApiCountModule() {
        }
        ApiCountModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [],
                        imports: [],
                        providers: [httpInterceptorProviders],
                        exports: []
                    },] }
        ];
        return ApiCountModule;
    }());

    exports.ApiCountModule = ApiCountModule;
    exports.LoaderService = LoaderService;
    exports.ɵa = ApiCountInterceptor;
    exports.ɵb = httpInterceptorProviders;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=api-count.umd.js.map
