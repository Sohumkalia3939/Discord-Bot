/**
 * @fileoverview added by tsickle
 * Generated from: lib/api-count.interceptor.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';
import { throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { LoaderService } from './loader.service';
import * as i0 from "@angular/core";
export class ApiCountInterceptor {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        /** @type {?} */
        const loaderService = this.injector.get(LoaderService);
        /** @type {?} */
        let cloneChanges = {};
        //Modify Request
        /** @type {?} */
        const authReq = req.clone(cloneChanges);
        loaderService.addAPI();
        return next.handle(authReq).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (event instanceof HttpResponse) {
                loaderService.removeAPI();
            }
            return event;
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            /** @type {?} */
            let data = {};
            data = {
                reason: error && error.error && error.error.reason ? error.error.reason : '',
                status: error.status
            };
            loaderService.removeAPI();
            return throwError(error);
        })));
    }
}
ApiCountInterceptor.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ApiCountInterceptor.ctorParameters = () => [
    { type: Injector }
];
/** @nocollapse */ ApiCountInterceptor.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ApiCountInterceptor_Factory() { return new ApiCountInterceptor(i0.ɵɵinject(i0.INJECTOR)); }, token: ApiCountInterceptor, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ApiCountInterceptor.prototype.injector;
}
/** @type {?} */
export const httpInterceptorProviders = [
    { provide: HTTP_INTERCEPTORS, useClass: ApiCountInterceptor, multi: true },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLWNvdW50LmludGVyY2VwdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXBpLWNvdW50LyIsInNvdXJjZXMiOlsibGliL2FwaS1jb3VudC5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBdUMsWUFBWSxFQUFxQixpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ILE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQVcsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBTWpELE1BQU0sT0FBTyxtQkFBbUI7Ozs7SUFDNUIsWUFBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUV0QyxDQUFDOzs7Ozs7SUFFRCxTQUFTLENBQUMsR0FBcUIsRUFBRSxJQUFpQjs7Y0FDeEMsYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQzs7WUFFbEQsWUFBWSxHQUFRLEVBQUU7OztjQUdwQixPQUFPLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUM7UUFFdkMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRXZCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQzVCLEdBQUc7Ozs7UUFBQyxDQUFDLEtBQXFCLEVBQUUsRUFBRTtZQUMxQixJQUFJLEtBQUssWUFBWSxZQUFZLEVBQUU7Z0JBQy9CLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUM3QjtZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2pCLENBQUMsRUFBQyxFQUNGLFVBQVU7Ozs7UUFBQyxDQUFDLEtBQXdCLEVBQUUsRUFBRTs7Z0JBQ2hDLElBQUksR0FBRyxFQUFFO1lBQ2IsSUFBSSxHQUFHO2dCQUNILE1BQU0sRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzVFLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTthQUN2QixDQUFDO1lBQ0YsYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQzFCLE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdCLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDWixDQUFDOzs7WUFuQ0osVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7O1lBUm9CLFFBQVE7Ozs7Ozs7O0lBV2IsdUNBQTBCOzs7QUFpQzFDLE1BQU0sT0FBTyx3QkFBd0IsR0FBRztJQUNwQyxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtDQUM3RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwUmVxdWVzdCwgSHR0cEhhbmRsZXIsIEh0dHBFdmVudCwgSHR0cFJlc3BvbnNlLCBIdHRwRXJyb3JSZXNwb25zZSwgSFRUUF9JTlRFUkNFUFRPUlMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIGNhdGNoRXJyb3IsIHRpbWVvdXQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi9sb2FkZXIuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5cbmV4cG9ydCBjbGFzcyBBcGlDb3VudEludGVyY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xuXG4gICAgfVxuXG4gICAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgICAgIGNvbnN0IGxvYWRlclNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChMb2FkZXJTZXJ2aWNlKTtcblxuICAgICAgICBsZXQgY2xvbmVDaGFuZ2VzOiBhbnkgPSB7fTtcblxuICAgICAgICAvL01vZGlmeSBSZXF1ZXN0XG4gICAgICAgIGNvbnN0IGF1dGhSZXEgPSByZXEuY2xvbmUoY2xvbmVDaGFuZ2VzKVxuXG4gICAgICAgIGxvYWRlclNlcnZpY2UuYWRkQVBJKCk7XG5cbiAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKGF1dGhSZXEpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKGV2ZW50OiBIdHRwRXZlbnQ8YW55PikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIEh0dHBSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBsb2FkZXJTZXJ2aWNlLnJlbW92ZUFQSSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBkYXRhID0ge307XG4gICAgICAgICAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uOiBlcnJvciAmJiBlcnJvci5lcnJvciAmJiBlcnJvci5lcnJvci5yZWFzb24gPyBlcnJvci5lcnJvci5yZWFzb24gOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBlcnJvci5zdGF0dXNcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGxvYWRlclNlcnZpY2UucmVtb3ZlQVBJKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfSkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGh0dHBJbnRlcmNlcHRvclByb3ZpZGVycyA9IFtcbiAgICB7IHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLCB1c2VDbGFzczogQXBpQ291bnRJbnRlcmNlcHRvciwgbXVsdGk6IHRydWUgfSxcbl07XG4iXX0=