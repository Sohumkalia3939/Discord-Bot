/**
 * @fileoverview added by tsickle
 * Generated from: lib/api-count.interceptor.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';
import { throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { LoaderService } from './loader.service';
import * as i0 from "@angular/core";
var ApiCountInterceptor = /** @class */ (function () {
    function ApiCountInterceptor(injector) {
        this.injector = injector;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    ApiCountInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        /** @type {?} */
        var loaderService = this.injector.get(LoaderService);
        /** @type {?} */
        var cloneChanges = {};
        //Modify Request
        /** @type {?} */
        var authReq = req.clone(cloneChanges);
        loaderService.addAPI();
        return next.handle(authReq).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event instanceof HttpResponse) {
                loaderService.removeAPI();
            }
            return event;
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            /** @type {?} */
            var data = {};
            data = {
                reason: error && error.error && error.error.reason ? error.error.reason : '',
                status: error.status
            };
            loaderService.removeAPI();
            return throwError(error);
        })));
    };
    ApiCountInterceptor.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ApiCountInterceptor.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    /** @nocollapse */ ApiCountInterceptor.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ApiCountInterceptor_Factory() { return new ApiCountInterceptor(i0.ɵɵinject(i0.INJECTOR)); }, token: ApiCountInterceptor, providedIn: "root" });
    return ApiCountInterceptor;
}());
export { ApiCountInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ApiCountInterceptor.prototype.injector;
}
/** @type {?} */
export var httpInterceptorProviders = [
    { provide: HTTP_INTERCEPTORS, useClass: ApiCountInterceptor, multi: true },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLWNvdW50LmludGVyY2VwdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXBpLWNvdW50LyIsInNvdXJjZXMiOlsibGliL2FwaS1jb3VudC5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBdUMsWUFBWSxFQUFxQixpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ILE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQVcsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBRWpEO0lBS0ksNkJBQW9CLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7SUFFdEMsQ0FBQzs7Ozs7O0lBRUQsdUNBQVM7Ozs7O0lBQVQsVUFBVSxHQUFxQixFQUFFLElBQWlCOztZQUN4QyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDOztZQUVsRCxZQUFZLEdBQVEsRUFBRTs7O1lBR3BCLE9BQU8sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQztRQUV2QyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFdkIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDNUIsR0FBRzs7OztRQUFDLFVBQUMsS0FBcUI7WUFDdEIsSUFBSSxLQUFLLFlBQVksWUFBWSxFQUFFO2dCQUMvQixhQUFhLENBQUMsU0FBUyxFQUFFLENBQUM7YUFDN0I7WUFDRCxPQUFPLEtBQUssQ0FBQztRQUNqQixDQUFDLEVBQUMsRUFDRixVQUFVOzs7O1FBQUMsVUFBQyxLQUF3Qjs7Z0JBQzVCLElBQUksR0FBRyxFQUFFO1lBQ2IsSUFBSSxHQUFHO2dCQUNILE1BQU0sRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzVFLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTthQUN2QixDQUFDO1lBQ0YsYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQzFCLE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdCLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDWixDQUFDOztnQkFuQ0osVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7OztnQkFSb0IsUUFBUTs7OzhCQUE3QjtDQTBDQyxBQXBDRCxJQW9DQztTQWhDWSxtQkFBbUI7Ozs7OztJQUNoQix1Q0FBMEI7OztBQWlDMUMsTUFBTSxLQUFPLHdCQUF3QixHQUFHO0lBQ3BDLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO0NBQzdFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBSZXF1ZXN0LCBIdHRwSGFuZGxlciwgSHR0cEV2ZW50LCBIdHRwUmVzcG9uc2UsIEh0dHBFcnJvclJlc3BvbnNlLCBIVFRQX0lOVEVSQ0VQVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgY2F0Y2hFcnJvciwgdGltZW91dCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IExvYWRlclNlcnZpY2UgfSBmcm9tICcuL2xvYWRlci5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcblxuZXhwb3J0IGNsYXNzIEFwaUNvdW50SW50ZXJjZXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7XG5cbiAgICB9XG5cbiAgICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICAgICAgY29uc3QgbG9hZGVyU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KExvYWRlclNlcnZpY2UpO1xuXG4gICAgICAgIGxldCBjbG9uZUNoYW5nZXM6IGFueSA9IHt9O1xuXG4gICAgICAgIC8vTW9kaWZ5IFJlcXVlc3RcbiAgICAgICAgY29uc3QgYXV0aFJlcSA9IHJlcS5jbG9uZShjbG9uZUNoYW5nZXMpXG5cbiAgICAgICAgbG9hZGVyU2VydmljZS5hZGRBUEkoKTtcblxuICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUoYXV0aFJlcSkucGlwZShcbiAgICAgICAgICAgIG1hcCgoZXZlbnQ6IEh0dHBFdmVudDxhbnk+KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRlclNlcnZpY2UucmVtb3ZlQVBJKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGRhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICByZWFzb246IGVycm9yICYmIGVycm9yLmVycm9yICYmIGVycm9yLmVycm9yLnJlYXNvbiA/IGVycm9yLmVycm9yLnJlYXNvbiA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IGVycm9yLnN0YXR1c1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbG9hZGVyU2VydmljZS5yZW1vdmVBUEkoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9KSk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgaHR0cEludGVyY2VwdG9yUHJvdmlkZXJzID0gW1xuICAgIHsgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsIHVzZUNsYXNzOiBBcGlDb3VudEludGVyY2VwdG9yLCBtdWx0aTogdHJ1ZSB9LFxuXTtcbiJdfQ==