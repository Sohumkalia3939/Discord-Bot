import { Injectable, ɵɵdefineInjectable, Injector, ɵɵinject, INJECTOR, NgModule } from '@angular/core';
import { BehaviorSubject, throwError } from 'rxjs';
import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/loader.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoaderService = /** @class */ (function () {
    function LoaderService() {
        this.apiCount = 0;
        this.api = new BehaviorSubject(this.apiCount);
        this.apiCountObservable = this.api.asObservable();
    }
    /**
     * @return {?}
     */
    LoaderService.prototype.addAPI = /**
     * @return {?}
     */
    function () {
        this.apiCount += 1;
        this.api.next(this.apiCount);
        console.log("Ongoing API count " + this.apiCount);
    };
    /**
     * @return {?}
     */
    LoaderService.prototype.removeAPI = /**
     * @return {?}
     */
    function () {
        this.apiCount -= 1;
        this.api.next(this.apiCount);
        console.log("Ongoing API count " + this.apiCount);
    };
    LoaderService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LoaderService.ctorParameters = function () { return []; };
    /** @nocollapse */ LoaderService.ngInjectableDef = ɵɵdefineInjectable({ factory: function LoaderService_Factory() { return new LoaderService(); }, token: LoaderService, providedIn: "root" });
    return LoaderService;
}());
if (false) {
    /** @type {?} */
    LoaderService.prototype.apiCount;
    /**
     * @type {?}
     * @private
     */
    LoaderService.prototype.api;
    /** @type {?} */
    LoaderService.prototype.apiCountObservable;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/api-count.interceptor.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ApiCountInterceptor = /** @class */ (function () {
    function ApiCountInterceptor(injector) {
        this.injector = injector;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    ApiCountInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        /** @type {?} */
        var loaderService = this.injector.get(LoaderService);
        /** @type {?} */
        var cloneChanges = {};
        //Modify Request
        /** @type {?} */
        var authReq = req.clone(cloneChanges);
        loaderService.addAPI();
        return next.handle(authReq).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event instanceof HttpResponse) {
                loaderService.removeAPI();
            }
            return event;
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            /** @type {?} */
            var data = {};
            data = {
                reason: error && error.error && error.error.reason ? error.error.reason : '',
                status: error.status
            };
            loaderService.removeAPI();
            return throwError(error);
        })));
    };
    ApiCountInterceptor.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ApiCountInterceptor.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    /** @nocollapse */ ApiCountInterceptor.ngInjectableDef = ɵɵdefineInjectable({ factory: function ApiCountInterceptor_Factory() { return new ApiCountInterceptor(ɵɵinject(INJECTOR)); }, token: ApiCountInterceptor, providedIn: "root" });
    return ApiCountInterceptor;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    ApiCountInterceptor.prototype.injector;
}
/** @type {?} */
var httpInterceptorProviders = [
    { provide: HTTP_INTERCEPTORS, useClass: ApiCountInterceptor, multi: true },
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/api-count.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ApiCountModule = /** @class */ (function () {
    function ApiCountModule() {
    }
    ApiCountModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [],
                    imports: [],
                    providers: [httpInterceptorProviders],
                    exports: []
                },] }
    ];
    return ApiCountModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: api-count.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ApiCountModule, LoaderService, ApiCountInterceptor as ɵa, httpInterceptorProviders as ɵb };
//# sourceMappingURL=api-count.js.map
